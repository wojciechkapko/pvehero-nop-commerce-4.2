@model SearchBoxModel
<form asp-route="ProductSearch" method="get" id="small-search-box-form">
    <input type="text" class="search-box-text" id="small-searchterms" autocomplete="off" name="q" placeholder="@T("Search.SearchBox.Tooltip")" aria-label="@T("Search.SearchBox.Text.Label")" />
    <svg class="icon font-size-base white"><use href="#search"></use></svg>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBoxBeforeSearchButton })
    <input type="submit" class="search-box-button" value="@T("Search.Button")" />
    @if (Model.SearchTermMinimumLength > 0)
    {
        <script asp-location="Footer">
            $("#small-search-box-form").on("submit", function(event) {
                if ($("#small-searchterms").val() == "") {
                    alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Search.EnterSearchTerms").Text))');
                    $("#small-searchterms").focus();
                    event.preventDefault();
                }
            });
        </script>
    }
    @if (Model.AutoCompleteEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function() {
                $('#small-searchterms').autoComplete({
                    delay: 500,
                    minChars: 3,
                    source: function (term, response) {
                        var term = $('#small-searchterms').val();
                        console.log(term);
                        $.getJSON('@(Url.RouteUrl("ProductSearchAutoComplete"))', { term }, function (data) { response(data) });
                    },
                    renderItem: function (item, search) {
                        search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                        $(".autocomplete-suggestions").css('display', 'flex');

                        return '<a href="' + item.producturl + '" class="w-100 p-3 d-flex align-items-center"><img class="mr-2" src=' + item.productpictureurl + '><span>' + item.label + '</span></a>';
                    }
                });
            });
        </script>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBox })
</form>
