@using Nop.Core;
@using Nop.Core.Domain.Orders

@model ProductDetailsModel.AddToCartModel
@inject IWorkContext workContext

@{
    var currency = "";
    if (@workContext.WorkingCurrency.CurrencyCode == "USD")
    {
        currency = "$";
    }
    else
    {
        currency = "€";
    }
}


@if (Model.UpdatedShoppingCartItemId > 0)
{
    <input asp-for="UpdatedShoppingCartItemId" type="hidden" />
}
@if (!Model.DisableBuyButton)
{



    <div class="add-to-cart d-flex flex-column">
        <div>
            @if (!Model.DisableBuyButton)
            {
                <div class="qty d-flex w-100 align-items-center">
                    @if (Model.CustomerEntersPrice)
                    {
                        <input type="hidden" asp-for="EnteredQuantity" class="d-none" value="1" />
                    }
                    else
                    {
                        <label asp-for="EnteredQuantity" asp-postfix=":" class="qty-label mr-2"></label>
                        @if (Model.AllowedQuantities.Count > 0)
                        {
                            <select asp-for="EnteredQuantity" asp-items="Model.AllowedQuantities" class="qty-dropdown w-100"></select>
                        }
                        else
                        {
                            <input asp-for="EnteredQuantity" class="qty-input font-bold" type="text" />
                            <script asp-location="Footer">
                            //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                            $(document).ready(function() {
                                $("#@Html.IdFor(model => model.EnteredQuantity)").on("keydown", function(event) {
                                    if (event.keyCode == 13) {
                                        $("#add-to-cart-button-@Model.ProductId").trigger("click");
                                        return false;
                                    }
                                });
                            });
                            </script>
                        }
                    }

                </div>

                {
                    var addToCartText = "";
                    if (Model.UpdatedShoppingCartItemId > 0 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                    {
                        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                    }
                    else
                    {
                        addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                    }
                    <a id="add-to-cart-button-@Model.ProductId" class="button-1 huge add-to-cart-button mt-4" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new {productId = Model.ProductId, shoppingCartTypeId = (int) ShoppingCartType.ShoppingCart})', '#product-details-form');return false;"><svg class="icon white size-1-25x mr-3"><use href="#shopping-bag"></use></svg>@addToCartText</a>
                }

                @if (!string.IsNullOrEmpty(Model.PreOrderAvailabilityStartDateTimeUserTime))
                {
                    <div class="pre-order-availability-date">
                        <label>@T("ShoppingCart.PreOrderAvailability"):</label>
                        @Html.Raw(Model.PreOrderAvailabilityStartDateTimeUserTime)
                    </div>
                }
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAddInfo, additionalData = Model })
        </div>
    </div>

    @if (Model.CustomerEntersPrice)
    {
        <div class="customer-entered-price mt-3 md-mt-0 md-ml-4 md-pl-4 d-inline-flex flex-column justify-content-center md-border-left-1 border-default">
            <div class="d-flex">
                <label class="enter-price-label mr-2">Your Price:&nbsp;&nbsp;@currency</label>
                @*round price*@
                <input asp-for="CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice))" class="enter-price-input" />
                <input type="hidden" id="currency-rate" class="d-none" value="@workContext.WorkingCurrency.Rate" />
            </div>
        </div>
    }
}