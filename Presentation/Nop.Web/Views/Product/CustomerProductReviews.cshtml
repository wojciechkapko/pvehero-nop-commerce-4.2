@model CustomerProductReviewsModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.CustomerProductReviews").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-my-product-reviews-list-page");
}
@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.ProductReviews })
}
<div class="page account-page my-product-reviews-list-page">
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.CustomerProductReviews")</h1>
    </div>
    <div class="page-body">
        @if (Model.ProductReviews.Count > 0)
        {
                @foreach (var review in Model.ProductReviews)
                {
                    var ratingPercent = review.Rating * 20;
                    <div class="product-review-item card default p-4">
                        <div class="review-item-head">
                            <div class="stars mr-2" data-stars="@review.Rating">
                                <svg class='icon star rate' data-rating="1"><use href='#star'></use></svg>
                                <svg class='icon star rate' data-rating="2"><use href='#star'></use></svg>
                                <svg class='icon star rate' data-rating="3"><use href='#star'></use></svg>
                                <svg class='icon star rate' data-rating="4"><use href='#star'></use></svg>
                                <svg class='icon star rate' data-rating="5"><use href='#star'></use></svg>
                            </div>

                            <div class="review-info">
                                <span class="user">
                                    <label>@T("Account.CustomerProductReviews.ProductReviewFor"):</label>
                                    <a href="@Url.RouteUrl("Product", new {SeName = review.ProductSeName})">@review.ProductName</a>

                                </span>

                            </div>
                            <span class="date ml-auto">
                                <span>@review.WrittenOnStr</span>
                            </span>

                        </div>
                        <div class="review-content">
                            <div class="review-text">
                                @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                            </div>
                            @foreach (var reviewType in review.AdditionalProductReviewList.Where(x => x.Rating > 0))
                            {
                                var ratingExtPercent = reviewType.Rating * 20;
                                <div class="review-type-rating-ext">
                                    <div class="review-title">
                                        <i>@reviewType.Name</i>
                                    </div>
                                    <div class="product-review-box">
                                        <div class="rating">
                                            <div style="width: @(ratingExtPercent)%">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            @*
        @await Html.PartialAsync("_ProductReviewHelpfulness", review.Helpfulness)
                            *@
                            @if (!string.IsNullOrEmpty(review.ReplyText))
                            {
                                <div class="reply">
                                    <div class="reply-header">
                                        @T("Reviews.Reply")
                                    </div>
                                    <div class="reply-text">
                                        @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReplyText, false, true, false, false, false, false))
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

          
            var pager = Html.Pager(Model.PagerModel);
            if (!string.IsNullOrEmpty(pager.ToHtmlString()))
            {
                <div class="pager">
                    @pager
                </div>
            }
        }
        else
        {
            <div class="no-data">
                @T("Account.CustomerProductReviews.NoRecords")
            </div>
        }
    </div>
</div>