@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page" + " class-" + @Model.Breadcrumb.CategoryBreadcrumb[0].SeName);

    Html.AppendScriptParts(ResourceLocation.Footer, "~/js/public.ajaxcart.js");
    Html.AppendScriptParts(ResourceLocation.Footer, "~/lib/formstone/core.min.js");
    Html.AddScriptParts(ResourceLocation.Footer, "~/lib/formstone/dropdown.min.js");
    Html.AppendCssFileParts($"~/lib/formstone/dropdown.min.css");
    Html.AppendCssFileParts($"~/css/productdetails.min.css");
    Html.AppendCssFileParts($"~/css/checkbox.min.css");
    Html.AppendCssFileParts($"~/css/stars.min.css");
    Html.AppendCssFileParts($"~/css/breadcrumb.min.css");
    Html.AppendCssFileParts($"~/css/product-grid.min.css");




    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }
    var fileExtension = (Model.WebPSupport) ? "-big.webp" : "-big.jpg";
    var imageUrl = "https://pvehero.com/images/products/" + @Model.SeName + @fileExtension;
    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\""+ @imageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\""+ @imageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\""+ @imageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential d-flex flex-column md-flex-row justify-content-center md-justify-content-start">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <!--product pictures-->
                    <div class="gallery">
                        <div class="product-details">
                            <img alt="Picture of @Model.Name" src="~/images/products/@Model.SeName@fileExtension" title="Picture of @Model.Name" itemprop="image" id="main-product-img-@Model.Id" />
                            <div class="product-name text-left">
                                @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                <h1 itemprop="name">
                                    @Model.Name
                                </h1>
                            </div>
                        </div>


                        @if (!string.IsNullOrEmpty(Model.FullDescription))
                        {
                            <div class="card default p-4 mb-3">
                                <!--product reviews-->
                                @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                            </div>
                            <div class="card default p-0">
                                <div class="full-description" itemprop="description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            </div>
                        }
                    </div>
                    <div class="overview">
                        @await Html.PartialAsync("_Discontinued", Model)

                        @*
                                                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                            }
                        *@

                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })

                        <!--availability-->
                        @await Html.PartialAsync("_Availability", Model)

                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }
                        <!--price & add to cart-->
                        <div class="card default d-flex flex-column" id="summary">
                            <div class="summary d-flex flex-column sm-flex-row sm-justify-around md-justify-content-center">
                                @{
                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)

                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                }
                            </div>
                        </div>
                        <div class="w-100">
                            @{
                                @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                            }
                        </div>
                        <!--wishlist, compare, email a friend-->
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })


                        @*
                                                <div class="overview-buttons">
                                                            @{
                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                            }
                                                @await Html.PartialAsync("_CompareProductsButton", Model)
                                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)

                                        </div>
                        *@


                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                        @await Html.PartialAsync("_ShareButton", Model)
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                @*
                                      <div class="product-collateral">
                        @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)

                    </div>
                *@

                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>

<script asp-location="Footer">
    AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart');
</script>
@if (@Model.Breadcrumb.CategoryBreadcrumb[0].SeName.Equals("world-of-warcraft"))
{
    <script type="text/javascript" asp-location="Footer">var whTooltips = { colorLinks: true, iconizeLinks: true, renameLinks: true };</script>
    <script type="text/javascript" asp-location="Footer" src="//wow.zamimg.com/widgets/power.js"></script>
}
<style>
        .html-product-details-page.class-@(Model.Breadcrumb.CategoryBreadcrumb[0].SeName).webp  .master-wrapper-page::before
        {
            background-image: url(/images/categories/@Model.Breadcrumb.CategoryBreadcrumb[0].SeName-bg.webp) !important;
        }
        .html-product-details-page.class-@(Model.Breadcrumb.CategoryBreadcrumb[0].SeName).no-webp .master-wrapper-page::before
        {
            background-image: url(/images/categories/@Model.Breadcrumb.CategoryBreadcrumb[0].SeName-bg.jpg) !important;
        }
</style>