@using Nop.Core
@model CustomerInfoModel
@inject Nop.Core.IWebHelper webHelper
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-customer-info-page");
    Html.AppendCssFileParts($"~/css/account.min.css");
}

@section left
    {
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Info })
}

<div class="page account-page customer-info-page">
    <div class="page-title">
        <h1>@T("Account.CustomerInfo")</h1>
    </div>
    <div class="page-body">
        @if (!string.IsNullOrEmpty(Model.Result))
        {
            <div class="result">
                @Model.Result
            </div>
        }
        <form asp-route="CustomerInfo" method="post">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourPersonalDetails")</strong>
                </div>
                <div class="form-fields">
                    <div class="inputs">
                        <input asp-for="FirstName" class="form-input" placeholder="First name" />
                    </div>
                    <span asp-validation-for="FirstName"></span>

                    <div class="inputs">
                        <input asp-for="LastName" class="form-input" placeholder="Last name" />
                    </div>
                    <span asp-validation-for="LastName"></span>

                    <div class="inputs">
                        <div class="input-prepend"><div class="input-content"><svg class="icon"><use href="#envelope"></use></svg></div></div>
                        <input asp-for="Email" class="email form-input" placeholder="Email" />
                    </div>
                    <span asp-validation-for="Email"></span>
                    @if (!string.IsNullOrEmpty(Model.EmailToRevalidate))
                    {
                        <label asp-for="EmailToRevalidate" class="mb-2"></label>
                        <div class="inputs">
                            <span class="email-to-revalidate mr-3">@Model.EmailToRevalidate</span>
                            <span class="email-to-revalidate-note field-validation-error">
                                @T("Account.Fields.EmailToRevalidate.Note")
                            </span>
                        </div>
                    }
                </div>
                <div class="title">
                    <strong>@T("Account.Options")</strong>
                </div>
                <div class="form-fields">
                    <div class="inputs">
                        <div class="checkbox">
                            <input class="d-none" type="checkbox" data-val="true" data-val-required="The Newsletter field is required." id="Newsletter" name="Newsletter" value="true" checked="@Model.Newsletter">
                            <label for="Newsletter" class="checkbox-style"></label>
                            <label for="Newsletter" class="checkbox-label mr-3">Newsletter:</label>
                        </div>
                        <span asp-validation-for="Newsletter"></span>
                    </div>
                    @if (Model.CustomerAttributes.Count > 0)
                    {
                        @await Html.PartialAsync("_CustomerAttributes", Model.CustomerAttributes)
                    }
                </div>
                <button type="submit" id="save-info-button" name="save-info-button" class="button-1 save-customer-info-button w-100">@T("Common.Save")</button>
            </div>

            @if (Model.NumberOfExternalAuthenticationProviders > 0)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.AssociatedExternalAuth")</strong>
                    </div>
                    @if (Model.AssociatedExternalAuthRecords.Count > 0)
                    {
                        //existing associated external records
                        <div class="table-wrapper">
                            <table class="data-table">
                                <colgroup>
                                    <col />
                                    <col />
                                    <col />
                                </colgroup>
                                <thead>
                                    <tr>
                                        <th class="auth-method-name">
                                            @T("Account.AssociatedExternalAuth.AuthMethodName")
                                        </th>
                                        <th class="email">
                                            @T("Account.AssociatedExternalAuth.Email")
                                        </th>
                                        <th class="external-id">
                                            @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                                        </th>
                                        @if (Model.AllowCustomersToRemoveAssociations)
                                        {
                                            <th class="remove">
                                                @T("Account.AssociatedExternalAuth.Remove")
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.AssociatedExternalAuthRecords)
                                    {
                                        <tr>
                                            <td class="auth-method-name">
                                                @item.AuthMethodName
                                            </td>
                                            <td class="email">
                                                @item.Email
                                            </td>
                                            <td class="external-id">
                                                @CommonHelper.EnsureMaximumLength(item.ExternalIdentifier, 40, "...")
                                            </td>
                                            @if (Model.AllowCustomersToRemoveAssociations)
                                            {
                                                <td class="remove">
                                                    <a href="#" onclick="return removeexternalassociation(@item.Id)">@T("Account.AssociatedExternalAuth.Remove")</a>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    @if (Model.NumberOfExternalAuthenticationProviders > Model.AssociatedExternalAuthRecords.Count)
                    {
                        //we can add more external records
                        var loginUrl = Url.RouteUrl("Login", null, webHelper.CurrentRequestProtocol);
                        <div class="form-fields add-more-external-records">
                            @T("Account.AssociatedExternalAuth.AddMoreRecords")
                            <a href="@loginUrl">@loginUrl</a>
                        </div>
                    }
                </div>
            }

            @if (Model.GdprConsents.Count > 0)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.UserAgreement")</strong>
                    </div>
                    <div class="form-fields">
                        @foreach (var consent in Model.GdprConsents)
                        {
                            if (consent.IsRequired)
                            {
                                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('#save-info-button').on('click', function() {
                                            if ($('#consent@(consent.Id)').is(':checked')) {
                                                    //do some stuff
                                                    return true;
                                                } else {
                                                    //just show validation errors, don't post
                                               alert('@Html.Raw(JavaScriptEncoder.Default.Encode(consent.RequiredMessage))');
                                                    return false;
                                                }
                                            });
                                    });
                                </script>
                            }
                            <div class="inputs accept-consent">
                                <input id="consent@(consent.Id)" type="checkbox" name="consent@(consent.Id)" checked="@consent.Accepted" />
                                <label for="consent@(consent.Id)">@consent.Message</label>
                            </div>
                        }
                    </div>
                </div>
            }
        </form>
    </div>
</div>

<script asp-location="Footer">
    function removeexternalassociation(itemId) {
        if (confirm('@T("Common.AreYouSure")')) {
            var postData = {
                id: itemId
            };
            addAntiForgeryToken(postData);
            $.ajax({
                cache: false,
                type: "POST",
                url: "@Url.Action("RemoveExternalAssociation", "Customer")",
                data: postData,
                dataType: "json",
                success: function (data, textStatus, jqXHR) {
                    location.href = data.redirect;
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Failed to delete');
                }
            });
        }
        return false;
    }
</script>