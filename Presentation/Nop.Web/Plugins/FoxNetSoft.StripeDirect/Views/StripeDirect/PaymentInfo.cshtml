@model FoxNetSoft.Plugin.Payments.StripeDirect.Models.PaymentInfoModel
@using FoxNetSoft.Plugin.Payments.StripeDirect.Extentions
@using FoxNetSoft.Plugin.Payments.StripeDirect.Helpers
@{
    Layout = "";
}

@*
       <style>
        #stripe-payment-form {
            width: 100%;
            padding: 0 5px 0 5px;
            margin: auto;
            max-width: 430px;
        }

        .payment-stripe-next-step-button {
            margin-top: 10px;
        }

        .form-sprite-payment-cardholder {
            text-align: left;
        }

            .form-sprite-payment-cardholder label {
                display: inline-block;
                margin: 0 10px 0 0;
                text-align: left;
            }

            .form-sprite-payment-cardholder input[type="text"] {
                min-height: 40px;
                max-width: 430px;
                width: 100%;
            }

        #stripe-cardholder-name {
            margin-top: 15px;
            margin-bottom: 15px;
        }
        /**
        * The CSS shown here will not be introduced in the Quickstart guide, but shows
        * how you can use CSS to style your Element's container.
        */
        .StripeElement {
            box-sizing: border-box;
            height: 40px;
            padding: 10px 12px;
            border: 1px solid transparent;
            border-radius: 4px;
            background-color: white;
            box-shadow: 0 1px 3px 0 #e6ebf1;
            -webkit-transition: box-shadow 150ms ease;
            transition: box-shadow 150ms ease;
        }

        .StripeElement--focus {
            box-shadow: 0 1px 3px 0 #cfd7df;
        }

        .StripeElement--invalid {
            border-color: #fa755a;
        }

        .StripeElement--webkit-autofill {
            background-color: #fefde5 !important;
        }

        #stripe-card-errors {
            color: red;
            padding: 10px;
        }

        .form-sprite-payment-button {
            text-align: center;
        }
    </style>
*@

@if (Model.Warnings.Any())
{
    <div class="message-error">
        <ul>
            @foreach (var warning in Model.Warnings)
            {
                <li>@warning</li>
            }
        </ul>
    </div>
}
else
{
    <div id="stripe-payment-was-sent" style="display:none;">
        @T("FoxNetSoft.Plugin.Payments.StripeDirect.PaymentWasSent")
    </div>
    @*
                <div id="stripe-payment-form">
            <input type="hidden" asp-for="StripeErrors">
            <input type="hidden" asp-for="StripePaymentIntentId">

            <div class="form-sprite-payment">
                <div class="form-sprite-payment-cardholder">
                    <label for="card-number">
                        @T("FoxNetSoft.Plugin.Payments.StripeDirect.CardHolder")
                    </label>
                    <input id="stripe-cardholder-name" type="text" value="@Model.CardholderName">
                </div>
                <div id="card-number">
                    <!-- A Stripe Element will be inserted here. -->
                </div>
                <div id="card-expiry">
                    <!-- A Stripe Element will be inserted here. -->
                </div>
                <div id="card-cvc">
                    <!-- A Stripe Element will be inserted here. -->
                </div>
                <!-- Used to display Element errors. -->
                <div id="stripe-direct-payment-pay-button">
                    <!-- A Stripe Element will be inserted here. -->
                </div>
                <div id="stripe-card-errors" role="alert"></div>
            </div>
        </div>
    *@



    <div class="form-container" id="stripe-payment-form">
        <input type="hidden" asp-for="StripeErrors">
        <input type="hidden" asp-for="StripePaymentIntentId">

        <div id="my-sample-form" class="scale-down">
            <div class="cardinfo-card-number">
                <label class="cardinfo-label" for="card-number">@T("FoxNetSoft.Plugin.Payments.StripeDirect.CardHolder")</label>
                <input class='input-wrapper' id="stripe-cardholder-name" type="text" value="@Model.CardholderName">
            </div>

            <div class="cardinfo-card-number">
                <label class="cardinfo-label" for="card-number">Card Number</label>
                <div class='input-wrapper' id="card-number"></div>
                <div id="card-image"></div>
            </div>

            <div class="cardinfo-wrapper">
                <div class="cardinfo-exp-date">
                    <label class="cardinfo-label" for="expiration-date">Valid Thru</label>
                    <div class='input-wrapper' id="card-expiry"></div>
                </div>

                <div class="cardinfo-cvv">
                    <label class="cardinfo-label" for="cvv">CVC</label>
                    <div class='input-wrapper' id="card-cvc"></div>
                </div>
                <div id="stripe-direct-payment-pay-button">
                    <!-- A Stripe Element will be inserted here. -->
                </div>
            </div>

        </div>
        <div id="stripe-card-errors" role="alert"></div>
    </div>




    <script>
        var hasstripedirectcardpayment = false;
        var stripe;
        var cardStripeElement;
        var cardNumber;
        var cardExpiry;
        var cardCvc;
        if (typeof scriptpaypalpro === 'undefined') {
            var scriptpaypalpro;
        }
        function stripeStripeDirectInit() {
            if (typeof scriptpaypalpro === 'undefined') {
                scriptpaypalpro = $('.payment-info-next-step-button').attr("onclick");
            }
            $(document).ready(function () {
                //confirm-order-next-step-button
                //confirm-order-button
                //payment-info-next-step-button
                    @if (Model.OnePageCheckoutPlugin)
                    {
                        <text>
                $('.confirm-order-button').show().prop("onclick", null).unbind().click(createstripedirectpayment);
                $("#checkoutForm").find("button[data-complete]").show().prop("onclick", null).unbind().click(createstripedirectpayment);
                        </text>
                    }
                    else
                    {
                        <text>
                $('.payment-info-next-step-button').show().prop("onclick", null).unbind().click(createstripedirectpayment);
                        </text>
                    }
                //$("#checkoutForm").find(".complete-button").find(':submit').click(createstripedirectpayment);

                if (typeof stripe == 'undefined') {
                   stripe = Stripe('@Model.PublishableKey');
                }
                var elements = stripe.elements({
                    fonts: [
                      {
                        cssSrc: 'https://fonts.googleapis.com/css?family=Cabin:500',
                      },
                    ],
                    // Stripe's examples are localized to specific languages, but if
                    // you wish to have Elements automatically detect your user's locale,
                    // use `locale: 'auto'` instead.
                    locale: 'auto',
                });

                  var elementStyles = {
                    base: {
                      color: '#282c37',
                      fontWeight: 500,
                      fontFamily: 'Cabin, sans-serif',
                      fontSize: '16px',
                      fontSmoothing: 'antialiased',

                      ':focus': {
                        color: '#424770',
                      },

                      '::placeholder': {
                        color: '#9BACC8',
                      },

                      ':focus::placeholder': {
                        color: '#CFD7DF',
                      },
                    },
                    invalid: {
                      color: '#eb1c26',
                      ':focus': {
                        color: '#eb1c26',
                      },
                      '::placeholder': {
                        color: '#eb1c26',
                      },
                    },
                  };

                  var elementClasses = {
                    focus: 'focus',
                    empty: 'empty',
                    invalid: 'invalid',
                  };
                //cardStripeElement = elements.create('card', { hidePostalCode: @(Model.HidePostalCode.ToString().ToLower()), postalCode: '@Model.BillingAddress?.ZipPostalCode?.FixIllegalJavaScriptChars()'});
                //cardStripeElement.mount('#stripe-card-element');

                cardNumber = elements.create('cardNumber', {
                    style: elementStyles,
                    classes: elementClasses,
                  });
                  cardNumber.mount('#card-number');

                  cardExpiry = elements.create('cardExpiry', {
                    style: elementStyles,
                    classes: elementClasses,
                  });
                  cardExpiry.mount('#card-expiry');

                  cardCvc = elements.create('cardCvc', {
                    style: elementStyles,
                    classes: elementClasses,
                  });
                cardCvc.mount('#card-cvc');

                cardNumber.on('change', function (event) {
                    if (event.complete) {
                        console.log(event.brand);
                        $("#my-sample-form").removeClass().addClass(event.brand);
                        $('#card-image').removeClass().addClass(event.brand);
                  } else if (event.error) {
                    // show validation to customer
                  }
                });

                @if (Model.EnablePaymentRequestButton)
                {
                    <text>
                    var paymentRequest = stripe.paymentRequest({
                        country: '@Model.AccountCountryCode',
                        currency: '@Model.Currency',
                        total: {
                            label: '@Model.Description',
                            amount: @(Model.Amount)
                        },
                        requestPayerName: true,
                        requestPayerEmail: true,
                    });
                    var prButton = elements.create('paymentRequestButton', {
                        paymentRequest: paymentRequest,
                    });

                    // Check the availability of the Payment Request API first.
                    paymentRequest.canMakePayment().then(function (result) {
                        if (result) {
                            prButton.mount('#stripe-direct-payment-pay-button');
                        } else {
                            //we don't need to hid the button
                            //document.getElementById('stripe-direct-payment-pay-button').style.display = 'none';
                        }
                    });

                    paymentRequest.on('paymentmethod', function (ev) {
                        if (ev.error) {
                            // Show error in payment form
                            stripePaymentError(ev.error);
                        } else {
                            createStripePaymentIntent(ev.paymentMethod.id);
                        }
                    });
                    </text>
                }
            });
        }
        function createstripedirectpayment() {
            if ($('#stripe-payment-form').length === 0) {
                if (typeof scriptpaypalpro !== 'undefined' && scriptpaypalpro.length !== 0) {
                    eval(scriptpaypalpro);
                }
                return true;
            }
            if (hasstripedirectcardpayment) {
                return true;
            }
            stripeEnableDisableButtons(true);

            var cardholderName = document.getElementById('stripe-cardholder-name');
            stripe.createPaymentMethod('card', cardNumber, {
                         billing_details: {
                                    name: cardholderName.value,
                                    @if (!string.IsNullOrWhiteSpace(Model.BillingAddress?.PhoneNumber))
                                    {
                                     <text>
                                    phone: '@Model.BillingAddress?.PhoneNumber?.FixIllegalJavaScriptChars()',
                                     </text>
                                    }
                                    email: '@Model.BillingAddress?.Email?.FixIllegalJavaScriptChars()',
                                    address: {
                                        city: '@Model.BillingAddress?.City?.FixIllegalJavaScriptChars()',
                                        postal_code: '@Model.BillingAddress?.ZipPostalCode?.FixIllegalJavaScriptChars()',
                                        line1: '@Model.BillingAddress?.Address1?.FixIllegalJavaScriptChars()',
                                        line2: '@Model.BillingAddress?.Address2?.FixIllegalJavaScriptChars()',
                                        country: '@Model.BillingAddress?.Country?.TwoLetterIsoCode?.FixIllegalJavaScriptChars()',
                                        state: '@Model.BillingAddress?.StateProvince?.Abbreviation?.FixIllegalJavaScriptChars()'
                                    }
                                }
            }).then(function (result) {
                if (result.error) {
                   // Show error in payment form
                    stripePaymentError(result.error);
                } else {
                    createStripePaymentIntent(result.paymentMethod.id);
                }
            });
            event.preventDefault();
            return false;
        }

        function createStripePaymentIntent(paymentMethodId)
        {
            fetch('@Url.Action("GetPaymentIntentId", "StripeDirectPayment")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ paymentmethodid: paymentMethodId })
            }).then(function (result) {
                // Handle server response (see Step 3)
                result.json().then(function (json) {
                    handleStripeServerResponse(json);
                })
            });
        }

        function handleStripeServerResponse(result) {
            if (result.error) {
                // Inform the customer that there was an error.
                stripePaymentError(result.error)
            } else if (result.requires_action) {
                // Use Stripe.js to handle required card action
                stripe.handleCardAction(
                    result.payment_intent_client_secret
                ).then(function (result) {
                    if (result.error) {
                        // Inform the customer that there was an error.
                        stripePaymentError(result.error)
                        // Show error in payment form
                    } else {
                        // The card action has been handled
                        // The PaymentIntent can be confirmed again on the server
                        stripePaymentSucceeded(result.id);
                    }
                });
            } else {
                // Show success message
                // The payment has succeeded. Display a success message.
                stripePaymentSucceeded(result.payment_intent_id);
            }
        }
        function stripePaymentError(error) {
            // Inform the customer that there was an error.
            var errorElement = document.getElementById('stripe-card-errors');
            //errorElement.textContent = JSON.stringify(error.message);
            if (error.message !== undefined) {
                errorElement.textContent = error.message;
                $('#@Html.IdFor(model => model.StripeErrors)').val(error.message);
            }
            else {
                errorElement.textContent = error;
                $('#@Html.IdFor(model => model.StripeErrors)').val(error);
            }
            $(errorElement).show();
            stripeEnableDisableButtons(false);
        }
        function stripePaymentSucceeded(paymentintentid) {
            hasstripedirectcardpayment = true;
            var errorElement = document.getElementById('stripe-card-errors');
            // The payment has succeeded. Display a success message.
            errorElement.textContent = "";
            $('#@Html.IdFor(model => model.StripeErrors)').val("");
            $('#@Html.IdFor(model => model.StripePaymentIntentId)').val(paymentintentid);
            //$('.payment-info-next-step-button, .confirm-order-button').show();
            //$("#stripe-payment-form").hide();
            //$("#stripe-payment-was-sent").show();

            stripeEnableDisableButtons(false);

            //$('.payment-info-next-step-button, .confirm-order-button').show().click();
            //$("#checkoutForm").find("button[data-complete]").show().click();
            if (typeof scriptpaypalpro !== 'undefined' && scriptpaypalpro.length !== 0) {
                eval(scriptpaypalpro);
                return true;
            }
            @if (Model.OnePageCheckoutPlugin)
            {
                <text>
                confirmstripedirectpayment();
                </text>
            }
            else
            {
                <text>
                $('.payment-info-next-step-button').click();
                </text>
            }
        }

        function stripeEnableDisableButtons(disabled) {
            if (disabled) {
                @if (Model.OnePageCheckoutPlugin)
                {
                    <text>
                    $('.confirm-order-button').attr('disabled', true);
                    $("#checkoutForm").find("button[data-complete]").attr('disabled', true);
                    </text>
                }
                else
                {
                    <text>
                    $(".payment-info-next-step-button").attr('disabled', true);
                    </text>
                }
            }
            else {
                @if (Model.OnePageCheckoutPlugin)
                {
                    <text>
                    $('.confirm-order-button').removeAttr('disabled');
                    $("#checkoutForm").find("button[data-complete]").removeAttr('disabled');
                    </text>
                }
                else
                {
                    <text>
                    $(".payment-info-next-step-button").removeAttr('disabled');
                    </text>
                }
            }
        }
        function deferjqueryloading(method) {
            if (window.jQuery)
                method();
            else
                setTimeout(function () { deferjqueryloading(method) }, 50);
        }
        deferjqueryloading(stripeStripeDirectInit);
    </script>
    @if (Model.OnePageCheckoutPlugin)
    {
        @await Html.PartialAsync(ResolveViewPathHelper.GetViewPath("OrderConfirm"), Model);
    }
}